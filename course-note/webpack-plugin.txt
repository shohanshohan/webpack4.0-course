webpack 插件的使用

webpack 管理输出插件 html-webpack-plugin     clean-webpack-plugin
我们的输出文件 /dist/index.html 是我们手动添加并写入内容的
如果我们的打包输出文件有变化的话，我们就要同时去修改这个 index.html 文件以正确地加载文件
可不可以打包时帮我自动生成这个index.html输出文件并加载好我的打包文件
而且每次打包时会在 /dist 目录下生成打包文件，
如果配置输出的文件有变化，dist目录下的文件就会积压，因为之前打包的文件会一直在，而有些文件是没有用了的
如果我们能在打包前就把 dist 目录先清空就好了
要实现上面的要求，我们可以用两个插件
html-webpack-plugin //打包完成后自动生成输出文件
clean-webpack-plugin //打包之前清理打包目录 

我们先来使用 html-webpack-plugin
npm install html-webpack-plugin -D

打开配置文件 webpack.config.js 配置如下信息
const HtmlWebpackPlugin = require('html-webpack-plugin');
.....
,
plugins: [
	new HtmlWebpackPlugin()
]

我们把输出文件修改一下：webpack.config.js
output: {
		filename: '[name].bundle.js', //输出文件不再是默认的main.js而是指定 bundle.js, [name]这个值是根据entry中的key值 如main
		path: path.resolve(__dirname, 'dist')
},
再次执行打包 npm run dev
会发现dist目录下多了一个index.bundle.js
打开 index.html 会发现生成了新的内容，加载的脚本变成了 main.bundle.js
不过我们原来的标签 <div id="app"></div> 也没了
如果我们想要加入一些模版标签，我们可以指定一个模版文件
在 src 目录下新建 index.html 用作为模版文件
内容：
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Webpack Guide</title>
	</head>
	<body>
		<div id="app"></div>
	</body>
</html>

修改配置 webpack.config.js
plugins: [
		new HtmlWebpackPlugin({
			template: './src/index.html' //指定模板
		})
	]

重新打包 npm run dev
查看 dist/index.html 发现模板标签有了，打包后的脚本也加载了

但dist/目录下的main.js 是之前打包的文件，现在是没有用了的，我们在重新打包时不想要之前打包后留下的无用文件
这个时候用到插件 clean-webpack-plugin
npm install clean-webpack-plugin -D

然后在配置文件webpack.config.js 中配置这个插件
const CleanWebpackPlugin = require('clean-webpack-plugin');
plugins: [
		new CleanWebpackPlugin(), //加入这个插件
		new HtmlWebpackPlugin({
			template: './src/index.html'
		})
	]

再次打包可以看到之前的打包文件 main.js 已经删除